def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_win(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True

    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_draw(board):
    return all(cell != ' ' for row in board for cell in row)

def get_empty_cells(board):
    empty_cells = [(row, col) for row in range(3) for col in range(3) if board[row][col] == ' ']
    return empty_cells

def minimax(board, depth, is_maximizing):
    scores = {
        'X': 1,
        'O': -1,
        'Tie': 0,
    }

    if check_win(board, 'X'):
        return scores['X']
    elif check_win(board, 'O'):
        return scores['O']
    elif is_draw(board):
        return scores['Tie']

    if is_maximizing:
        max_eval = float('-inf')
        for row, col in get_empty_cells(board):
            board[row][col] = 'X'
            eval = minimax(board, depth + 1, False)
            board[row][col] = ' '
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for row, col in get_empty_cells(board):
            board[row][col] = 'O'
            eval = minimax(board, depth + 1, True)
            board[row][col] = ' '
            min_eval = min(min_eval, eval)
        return min_eval

def best_move(board):
    best_score = float('-inf')
    move = None

    for row, col in get_empty_cells(board):
        board[row][col] = 'X'
        score = minimax(board, 0, False)
        board[row][col] = ' '

        if score > best_score:
            best_score = score
            move = (row, col)

    return move

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        row, col = map(int, input("Enter your move (row and column, e.g., '0 0' for top-left): ").split())
        if board[row][col] == ' ':
            board[row][col] = 'O'
        else:
            print("Invalid move. Try again.")
            continue

        print_board(board)

        if check_win(board, 'O'):
